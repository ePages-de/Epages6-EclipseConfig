<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template context="perl" description="Perl Script Starter" enabled="true" name="perl">#!${interpreter}
use strict;
use warnings;

${cursor}</template><template context="perl" description="Perl Package Starter" enabled="true" name="package">package ${packagename};

${cursor}</template><template context="perl" description="LogDebug" enabled="true" name="LogDebug">LogDebug( q{${Variable}:}, ${Variable});</template><template context="perl" description="eDoc of an epages package" enabled="true" name="# eDocPackage">#========================================================================================&#13;
# §package      ${packagename}&#13;
# §base         DE_EPAGES::${base}&#13;
# §state        public&#13;
#----------------------------------------------------------------------------------------&#13;
# §description  #TODO: Add a description for ${packagename}&#13;
#----------------------------------------------------------------------------------------&#13;
# §example      #TODO: Add an example for ${packagename}&#13;
#========================================================================================</template><template context="perl" description="getter/setter method" enabled="true" name="subGetterSetter">sub ${var} {&#13;
    my $$self = shift;&#13;
    my ($$${var}) = @_;&#13;
    return $$self-&gt;{'${var}'} unless (defined($$${var}));&#13;
    $$self-&gt;{'${var}'} = $$${var};&#13;
}</template><template context="perl" description="foreach" enabled="true" name="foreach">foreach my $$${i} (@{${cursor}}){&#13;
    &#13;
}</template><template context="perl" description="eDoc of an epages function" enabled="true" name="# eDocFunction">#========================================================================================&#13;
# §function     ${Function}&#13;
# §state        public private&#13;
#----------------------------------------------------------------------------------------&#13;
# §syntax       ${Function}( $$${Input1} );&#13;
#----------------------------------------------------------------------------------------&#13;
# §description  #TODO: Add description for ${Function}&#13;
#----------------------------------------------------------------------------------------&#13;
# §input        $$${Input1} | #TODO: Add input description for ${Function} | boolean integer string object refhash refarray&#13;
# §return       $$${ReturnVariable} | #TODO: Add return description for ${Function} | boolean integer string object refhash refarray&#13;
#========================================================================================</template><template context="perl" description="subNew" enabled="true" name="subNew">sub new {&#13;
    my $$class = shift;&#13;
    my %args  = @_;&#13;
    my $$self  = bless {}, $$class;&#13;
    return $$self;&#13;
}</template><template context="perl" description="use Core::API::Log" enabled="true" name="useLogDebug">use DE_EPAGES::Core::API::Log qw ( ${LogDebug} ${cursor});</template><template context="perl" description="use Object::API::Factory" enabled="true" name="useFactory">use DE_EPAGES::Object::API::Factory qw ( ${LoadObject} ${LoadClassByAlias} ${cursor});</template><template context="perl" description="use Core::API::Error" enabled="true" name="useError">use DE_EPAGES::Core::API::Error qw ( ExistsError GetError ${cursor});</template><template context="perl" description="useWarning" enabled="true" name="useWarning">use DE_EPAGES::Core::API::Warning qw ( Warning BlockWarnings );</template><template context="perl" description="BlockWarnings" enabled="true" name="BlockWarnings">my $$aWarnings = BlockWarnings( sub {&#13;
    eval {&#13;
        ${cursor}&#13;
    };&#13;
    &#13;
   	Warning(GetError()) if (ExistsError());&#13;
});</template><template context="perl" description="DAL Method" enabled="true" name="LoadClassAndObjects">my $$Class    = LoadClassByAlias('${Classname}');&#13;
my $$a${List}  = $$Class-&gt;getObjects("By${Index}",[$$${Variable}]);</template><template context="perl" description="use PerlTools" enabled="true" name="usePerlTools">use DE_EPAGES::Core::API::PerlTools qw ( ${ElementOf} ${cursor});</template><template context="perl" description="ElementOf" enabled="true" name="ElementOf">ElementOf($$${Element},@${List})</template><template context="perl" description="get my $self" enabled="true" name="mySelfShift">my $$self = shift;</template><template context="perl" description="use feature switch" enabled="true" name="useFeatureSwitch">use feature 'switch';</template><template context="perl" description="sub ErrorDefinition" enabled="true" name="subErrorDefinition">sub ErrorDefinition {&#13;
    return {&#13;
            '${ErrorCode}' =&gt; '${ErrorMessage}',&#13;
    };&#13;
}</template><template context="perl" description="use TestParameter" enabled="true" name="useTestParameter">use DE_EPAGES::Core::API::TestParameter qw ( ${TestString} ${cursor});</template><template context="perl" description="existsCartridge" enabled="true" name="existsCartridge"># make sure that the cartridge is installed&#13;
unless (ExistsCartridgeByPackage('DE_EPAGES::${Cartridge}')) {&#13;
    print 'Store: '.$$StoreName.": Cartridge ${Cartridge} is not installed.\n" if ($$printOutput);&#13;
    return;&#13;
}</template><template context="perl" description="sub with shift self" enabled="true" name="subSelf">sub ${SubName} {&#13;
    my $$self = shift;&#13;
    my (${Arguments}) = @_;&#13;
    ${cursor}&#13;
}</template><template context="perl" description="Transaction" enabled="true" name="Transaction">Transaction(sub {&#13;
    ${cursor}&#13;
});</template><template context="perl" description="use Transaction" enabled="true" name="useTransaction">use DE_EPAGES::Object::API::Factory qw ( Transaction );</template><template context="perl" description="get System Variables" enabled="true" name="getSystemInfo">my $$hInfo = LoadRootObject()-&gt;get([qw( ${cursor} )]);</template><template context="perl" description="public sub with epages API doc" enabled="true" name="subPublic">#========================================================================================&#13;
# §function     ${Function}&#13;
# §state        ${public}&#13;
#----------------------------------------------------------------------------------------&#13;
# §syntax       ${Function}( $$${Input1} );&#13;
#----------------------------------------------------------------------------------------&#13;
# §description  ${Description}&#13;
#----------------------------------------------------------------------------------------&#13;
# §input        $$${Input1} | ${Input1Description} | boolean integer string object refhash refarray&#13;
# §return       $$${ReturnVariable} | ${ReturnDescription} | boolean integer string object refhash refarray&#13;
#========================================================================================&#13;
sub ${Function} {&#13;
    my ($$${Input1}) = @_;&#13;
    my $$${ReturnVariable};&#13;
&#13;
    ${cursor}&#13;
    return $$${ReturnVariable};&#13;
}</template><template context="perl" description="get Object attributes into hInfo hash" enabled="true" name="getObjectInfo">my $$hInfo = ${Object}-&gt;get([qw( ${cursor} )]);</template><template context="perl" description="getLog()-&gt;debug()" enabled="true" name="getLogDebug">GetLog()-&gt;debug(${cursor});</template><template context="perl" description="epages api doc §input" enabled="true" name="# §input"># §input        $$${Input1} | ${Input1Description} | boolean integer string object refhash refarray</template><template context="perl" description="epages api doc §return" enabled="true" name="# §return"># §return       $$${ReturnVariable} | ${ReturnDescription} | boolean integer string object refhash refarray</template><template context="perl" description="read $Servlet from argument list" enabled="true" name="myServlet">my ($$Servlet) = @_;</template><template context="perl" description="read elements from argument list" enabled="true" name="mySubArgs">my (${Arguments}) = @_;</template><template context="perl" description="if" enabled="true" name="if">if (${Condition}) {&#13;
    ${cursor}&#13;
}</template><template context="perl" description="if else" enabled="true" name="ifelse">if (${Condition}) {&#13;
    ${cursor}&#13;
} else {&#13;
    &#13;
}</template><template context="perl" description="perl switch statement" enabled="true" name="givenWhen">given (${Val}) {&#13;
    when (${Statement}) { ${Expr} }&#13;
    ${cursor}&#13;
    default { }&#13;
}</template><template context="perl" description="when case" enabled="true" name="when">when (${String}) {&#13;
    ${cursor}&#13;
}</template><template context="perl" description="TestObject" enabled="true" name="TestObject">TestObject('${Object}',$$${Object},'${Package}::API::Object::${Object}');</template><template context="perl" description="HookFunction" enabled="true" name="HookFunction">#========================================================================================&#13;
# §function     On${Hook}&#13;
# §state        public&#13;
#----------------------------------------------------------------------------------------&#13;
# §syntax       On${Hook}($$hParams);&#13;
#----------------------------------------------------------------------------------------&#13;
# §description  ${Hook} triggered, ${Description}&#13;
#----------------------------------------------------------------------------------------&#13;
# §input        $$hParams | hook arguments, used keys are&#13;
#               &lt;ul&gt;&#13;
#                   &lt;li&gt;Object - object&#13;
#               &lt;/ul&gt; | ref.hash.*&#13;
#========================================================================================&#13;
sub On${Hook} {&#13;
    my ($$hParams) = @_;&#13;
    ${cursor}&#13;
}</template><template context="perl" description="iterate over stringattributes via sql" enabled="true" name="sqlStringAttribute">my $$dbi = GetCurrentDBHandle();&#13;
my $$sql = &lt;&lt;SQL;&#13;
select sa.attributeobjectid, sa.value &#13;
from stringattribute sa&#13;
inner join attribute a on a.attributeid=sa.attributeid&#13;
inner join object co on co.objectid=a.attributeclassid&#13;
inner join object ao on ao.objectid=a.attributeid&#13;
where co.alias='${Class}'&#13;
and ao.alias='${Attribute}'&#13;
SQL&#13;
&#13;
my $$dbResult = $$dbi-&gt;execute($$sql);&#13;
foreach my $$Row (@$$dbResult) {&#13;
    ${cursor}&#13;
}</template><template context="perl" description="Frame comment for code structure commentation" enabled="true" name="# Frame Comment">#---------------------------------------------------------------------------
#  ${cursor}
#---------------------------------------------------------------------------</template><template context="perl" description="POD block from begin to end" enabled="true" name="=pod / =cut">=pod

${cursor}

=cut</template><template context="perl" description="End of POD block" enabled="true" name="=cut">=cut

${cursor}</template><template context="perl" description="Formatting region text/code/data" enabled="true" name="=for / =cut">=for ${formatname}

${cursor}

=end ${formatname}</template><template context="perl" description="HTML documentation" enabled="true" name="=begin html / =end">=begin  html

${cursor}

=end    html  #  back to Perl</template><template context="perl" description="man pages documentation" enabled="true" name="=begin man / =end">=begin  man 

${cursor}

=end    man   #  back to Perl</template><template context="perl" description="plain text documentation" enabled="true" name="=begin text / =end">=begin  text

${cursor}

=end    text  #  back to Perl</template><template context="perl" description="headline 1" enabled="true" name="=head1">=head1 ${cursor}</template><template context="perl" description="headline 2" enabled="true" name="=head2">=head2 ${cursor}</template><template context="perl" description="headline 3" enabled="true" name="=head3">=head3 ${cursor}</template><template context="perl" description="list" enabled="true" name="=over .. =back">=over ${indent level}

=item *

${cursor}

=item *



=back</template><template context="perl" description="list item" enabled="true" name="=item *">=item *

${cursor}</template><template context="perl" description="bold" enabled="true" name="= B&lt;&gt;">B&lt;${cursor}&gt;</template><template context="perl" description="literal" enabled="true" name="= C&lt;&gt;">C&lt;${cursor}&gt;</template><template context="perl" description="escape" enabled="true" name="= E&lt;&gt;">E&lt;${cursor}&gt;</template><template context="perl" description="filename" enabled="true" name="= F&lt;&gt;">F&lt;${cursor}&gt;</template><template context="perl" description="italic" enabled="true" name="= I&lt;&gt;">I&lt;${cursor}&gt;</template><template context="perl" description="link" enabled="true" name="= L&lt;&gt;">L&lt;${cursor}|&gt;</template><template context="perl" description="nobr. spaces" enabled="true" name="= S&lt;&gt;">S&lt;${cursor}&gt;</template><template context="perl" description="index" enabled="true" name="= X&lt;&gt;">X&lt;${cursor}&gt;</template><template context="perl" description="zero-width" enabled="true" name="= Z&lt;&gt;">Z&lt;${cursor}&gt;</template><template context="perl" description="do while loop" enabled="true" name="do-while">do {
    ${cursor}
} 
while ( ${condition} );</template><template context="perl" description="for loop" enabled="true" name="for">for ( ${begin}; ${condition}; ${end} ) {
    ${cursor}
}</template><template context="perl" description="unless condition" enabled="true" name="unless">unless ( ${condition} ) {
    ${cursor}
}</template><template context="perl" description="until-loop" enabled="true" name="until">until ( ${condition} ) {
	${cursor}
}</template><template context="perl" description="while loop" enabled="true" name="while">while ( ${condition} ) {
    ${cursor}
}</template><template context="perl" description="function" enabled="true" name="sub">sub ${name} {
    my ($$${Arguments}) = @_;
    ${cursor}
    return;
}</template><template context="perl" description="Open input file" enabled="true" name="open input file">my	$$INFILE_filename = '${filename}'; # input file name

open ( INFILE, '&lt;', $$INFILE_filename )
or die  "$$0 : failed to open  input file $$INFILE_filename : $$!\n";


close ( INFILE )
	or warn "$$0 : failed to close input file $$INFILE_filename : $$!\n";</template><template context="perl" description="Open output file" enabled="true" name="open output file">my	$$OUTFILE_filename = '${filename}'; # output file name

open ( OUTFILE, '&gt;', $$OUTFILE_filename ) or 
	die  "$$0 : failed to open  output file $$OUTFILE_filename : $$!\n";


close ( OUTFILE )
	or warn "$$0 : failed to close output file $$OUTFILE_filename : $$!\n";</template><template context="perl" description="Hash containing filename of each file that has been included by do or require." enabled="true" name="%INC">%INC</template><template context="perl" description="Hash containing current environment variables." enabled="true" name="%ENV">%ENV</template><template context="perl" description="Hash used to set signal handlers for various signals." enabled="true" name="%SIG">%SIG</template><template context="perl" description="Standard print command" enabled="true" name="print">print "${cursor}\n";</template><template context="perl" description="printf command" enabled="true" name="printf">printf ("${cursor}\n", ${Arguments});</template><template context="perl" description="Hash key containing environment variable" enabled="true" name="$ENV{$Key}">$$ENV{'${Key}'}</template><template context="perl" description="sprintf command" enabled="true" name="sprintf">sprintf ("${cursor}\n", ${Arguments});</template><template context="perl" description="add no critic comment" enabled="true" name="## no critic">## no critic (${CriticPolicy})</template><template context="perl" description="create a TriggerHook call" enabled="true" name="TriggerHook">TriggerHook('${HookName}', { ${HookParams} });</template><template context="perl" description="DAL Method" enabled="true" name="LoadClassAndObjects">my $$Class    = LoadClassByAlias('${Classname}');&#13;
my $$a${List}  = $$Class-&gt;getObjects('By${Index}',[$$${Variable}]);</template><template context="perl" description="perl skeleton for epages packages" enabled="true" name="epagesPackageSkeleton">#========================================================================================&#13;
# §package      DE_EPAGES::${Package}&#13;
# §base         ${Base}&#13;
# §state        public&#13;
# §description  ${Description}&#13;
#========================================================================================&#13;
package DE_EPAGES::${Package};&#13;
use base ${Base};&#13;
&#13;
use strict;&#13;
&#13;
sub ${MySub} {&#13;
    ${cursor}&#13;
}&#13;
&#13;
1;</template><template context="perl" description="method" enabled="true" name="sub">sub ${name} {
    my $$self = shift;
    my ($$${Arguments}) = @_;
    ${cursor}
    return;
}</template><template context="perl" description="calls $Form-&gt;executeFormError()" enabled="true" name="$Form-&gt;executeFormError">$$Form-&gt;executeFormError({&#13;
    'Reason' =&gt; '${Reason}',&#13;
    'Name'   =&gt; '${FormField}',&#13;
});</template><template context="perl" description="calls $Form-&gt;addFormError()" enabled="true" name="$Form-&gt;addFormError">$$Form-&gt;addFormError({&#13;
    'Reason' =&gt; '${Reason}',&#13;
    'Name'   =&gt; '${FormField}',&#13;
});</template><template context="perl" description="gets Servlet form with form validation" enabled="true" name="my $Form = $Servlet-&gt;form">my $$Form = $$Servlet-&gt;form;&#13;
$$Form-&gt;form(${Object},'${FormName}');</template><template context="perl" description="calls $Servlet-&gt;vars()" enabled="true" name="$Servlet-&gt;vars">$$Servlet-&gt;vars('${Name}',${Content});</template><template context="perl" description="epages api doc §output" enabled="true" name="# §output"># §output        $$${Output} | ${OutputDescription} | boolean integer string object refhash refarray</template><template context="perl" description="TestInteger" enabled="true" name="TestInteger">TestInteger('${Parameter}',$$${Parameter});</template><template context="perl" description="epages perl script skeleton using RunOnStore" enabled="true" name="epagesScriptSkeletonWithRunOnStore">use strict;&#13;
use DE_EPAGES::Core::API::Error qw ( ExistsError GetError );&#13;
use DE_EPAGES::Core::API::Script qw ( RunScript );&#13;
use DE_EPAGES::Core::API::Warning qw ( Warning );&#13;
use DE_EPAGES::Database::API::Connection qw ( RunOnStore );&#13;
use DE_EPAGES::WebInterface::API::MessageCenter qw ( SynchronizeCache );&#13;
use Getopt::Long;&#13;
use Time::HiRes qw ( time );&#13;
&#13;
sub Main {&#13;
&#13;
    local $$| = 1;&#13;
&#13;
    my $$Password;&#13;
    my $$StoreName;&#13;
    my $$Help;&#13;
    my $$NoOutput;&#13;
&#13;
    GetOptions(&#13;
        'help'        =&gt; \$$Help,&#13;
        'nooutput'    =&gt; \$$NoOutput,&#13;
        'passwd=s'    =&gt; \$$Password,&#13;
        'storename=s' =&gt; \$$StoreName,&#13;
    );&#13;
&#13;
    usage() if $$Help;&#13;
&#13;
    my $$time1 = time;&#13;
&#13;
    RunOnStore(&#13;
        Store      =&gt; $$StoreName,&#13;
        DBPassword =&gt; $$Password,&#13;
        Sub        =&gt; sub {&#13;
            ${RunMethod}();&#13;
        }&#13;
    );&#13;
    my $$time2   = time;&#13;
    my $$seconds = $$time2 - $$time1;&#13;
    my $$logmsg  = sprintf( 'need %.3f seconds', $$seconds );&#13;
    print $$logmsg. "\n" unless $$NoOutput;&#13;
&#13;
    # you need SynchronizeCache if you have manipulated any&#13;
    # objects during the runtime of this script.&#13;
    eval { SynchronizeCache(); };&#13;
    Warning( GetError() ) if ExistsError();&#13;
}&#13;
&#13;
sub ${RunMethod} {&#13;
    my %Arguments = @_;&#13;
    ${cursor}&#13;
    return;&#13;
}&#13;
&#13;
sub usage {&#13;
    print &lt;&lt;END_USAGE;&#13;
Usage:&#13;
    perl $$0 [options] [flags]&#13;
&#13;
options:&#13;
    -passwd       database user password              ()&#13;
    -storename    name of store                       (Store)&#13;
&#13;
flags:&#13;
    -nooutput   do not print any output&#13;
    -help       show the command line options&#13;
&#13;
Example:&#13;
    perl $$0 -storename Store&#13;
END_USAGE&#13;
    exit 2;&#13;
}&#13;
&#13;
RunScript( 'Sub' =&gt; \&amp;Main );</template><template context="perl" description="perl skeleton for epages packages using Exporter.pm" enabled="true" name="epagesPackageSkeletonWithExporter">#========================================================================================&#13;
# §package      DE_EPAGES::${Package}&#13;
# §base         Exporter&#13;
# §state        public&#13;
# §description  ${Description}&#13;
#========================================================================================&#13;
package DE_EPAGES::${Package};&#13;
use base Exporter;&#13;
&#13;
use strict;&#13;
&#13;
our @EXPORT_OK = qw (&#13;
  ${MySub}&#13;
);&#13;
&#13;
sub ${MySub} {&#13;
    ${cursor}&#13;
}&#13;
&#13;
1;</template><template context="perl" description="epages perl skeleton for tle handler" enabled="true" name="ePagesTLESkeleton">#========================================================================================&#13;
# §package      ${Package}::API::TLE::${TLEHandler}&#13;
# §state        public&#13;
# §description  TLEHandler '${TLEHandler}'. Respoonsible for TLE function ${MyTLE}&#13;
#========================================================================================&#13;
package ${Package}::API::TLE::${TLEHandler};&#13;
&#13;
use strict;&#13;
&#13;
sub new {&#13;
    my $$class = shift;&#13;
    my %args  = @_;&#13;
    my $$self  = bless {}, $$class;&#13;
    return $$self;&#13;
}&#13;
&#13;
sub ${MyTLE} {&#13;
    my $$self = shift; &#13;
    my ($$Processor, $$aParams) = @_; &#13;
&#13;
    ${cursor}&#13;
}&#13;
&#13;
sub RegisterHandlerProc { &#13;
    my ($$Params) = @_; &#13;
    __PACKAGE__-&gt;new()-&gt;register( $$Params-&gt;{'Processor'} );&#13;
    return; &#13;
} &#13;
&#13;
sub register { &#13;
    my $$self = shift; &#13;
    my ($$Processor) = @_; &#13;
    $$Processor-&gt;registerHandler('FunctionHandler', $$self, '${MyTLE}');&#13;
    return; &#13;
} &#13;
&#13;
1;</template><template context="perl" description="" enabled="true" name="usestrict">use strict;</template><template context="perl" description="Doc separation line" enabled="true" name="#---------">#----------------------------------------------------------------------------------------</template><template context="perl" description="" enabled="true" name="TestString">TestString('${Keyword}', $$${Keyword});</template><template context="perl" description="Errorhandling" enabled="true" name="Error(">Error( 'MissingParameter', { Parameter =&gt; 'Value' } ) unless $$Value;</template><template context="perl" description="ProhibitPathConcatenation" enabled="true" name="ProhibitPathConcatenation">ProhibitPathConcatenation</template><template context="perl" description="ProhibitPrivateSubroutineUse" enabled="true" name="ProhibitPrivateSubroutineUse">ProhibitPrivateSubroutineUse</template><template context="perl" description="ProhibitMagicNumbers" enabled="true" name="ProhibitMagicNumbers">ProhibitMagicNumbers</template><template context="perl" description="dereferencing self object" enabled="true" name="self-&gt;">$$self-&gt;</template><template context="perl" description="isa_ok from More package" enabled="true" name="isa_ok">isa_ok($$object, 'DE_EPAGES::Object::API::Object::Object', "$$SubTestName - Prove that ...");</template><template context="perl" description="unless defined $var" enabled="true" name="unless defined">unless defined ${cursor};</template><template context="perl" description="Test Perl more is_deeply" enabled="true" name="is_deeply(">is_deeply($$got_complex_structure, $$expected_complex_structure, "$$SubTestName - Prove that ...");</template><template context="perl" description="print Dumper ${cursor};" enabled="true" name="printdumper">use Data::Dumper;
print Dumper ${cursor}</template><template context="perl" description="" enabled="true" name="warndumper">use Data::Dumper;
warn Dumper ${cursor}</template><template context="perl" description="return unless defined ${cursor};" enabled="true" name="returnunlessdefined">return unless defined ${cursor};</template><template context="perl" description="return ${cursor};" enabled="true" name="return">return ${cursor};</template><template context="perl" description="TestArray('name',$name');" enabled="true" name="TestArray">TestArray('${Keyword}', $$${Keyword});</template><template context="perl" description="note ('--------------------------------------------------');" enabled="true" name="NoteLn">note ('--------------------------------------------------');</template><template context="perl" description="note('');" enabled="true" name="note">note('${cursor}');</template><template context="perl" description="isValid" enabled="true" name="isValid">isValid(${cursor})</template><template context="perl" description="push" enabled="true" name="push">push(@{${cursor}},$$Value);</template><template context="perl" description="helps to generate all neede elements for a simple package " enabled="true" name="package starter">#========================================================================================
# §package      ${packagename}
# §state        public
#----------------------------------------------------------------------------------------
# §description  #TODO: Add a description for ${packagename}
#----------------------------------------------------------------------------------------
# §example      #TODO: Add an example for ${packagename}
#========================================================================================
package ${packagename};

use strict;

#========================================================================================
# §function     new
# §state        public
#----------------------------------------------------------------------------------------
# §syntax       new( );
#----------------------------------------------------------------------------------------
# §description  constructor
#----------------------------------------------------------------------------------------
# §return       $$self | self | ${packagename}
#========================================================================================
sub new {
    my $$class = shift;
    my $$self  = bless {}, $$class;
    return $$self;
}

${cursor}

1;</template><template context="perl" description="anti pokemon exception" enabled="true" name="eval">eval {
    ${cursor}
};
if ( ExistsError() ) {
    my $$Error = GetError();
    if ( $$Error-&gt;code() eq 'ExceptedErrorCode' ) {
        LogError($$Error);
        # do your magic
    } else {
        Error($$Error); #forward all other Errors
    }
}</template><template context="perl" description="test with import xml based on core " enabled="true" name="test import xml">package ${packagename};
use base DE_EPAGES::Shop::API::TestImportXML;

use Test::More;

use strict;

#----------------------------------------------------------------------------------------
# Wrap for DE_EPAGES::Shop::API::TestImportXML
# You need to override this methods in other to use
#----------------------------------------------------------------------------------------
sub shopAlias {
    return 'ShopAliasInTheXMLFile';
}
sub importXMLPath {
    return 'RelativePath/ShopXMLs.xml';
}
#----------------------------------------------------------------------------------------

sub test {
    my $$self = shift;
    $$self-&gt;;test_something();
    done_testing();
}

sub test_something {
    my $$self = shift;
    my $$SubTestName = (caller(0))[3];

    ok(1, "$$SubTestName - Proves that ...");
    return;
}


__PACKAGE__-&gt;runScript();


1;</template><template context="perl" description="sub test" enabled="true" name="subtest">sub test_${Something} {
    my $$self = shift;
    my $$SubTestName = (caller(0))[3];
    ok(1, "$$SubTestName - Proves that ...");
}</template><template context="perl" description="test based on core" enabled="true" name="test framework core">package ${packagename};
use base DE_EPAGES::Core::API::Test;
use Test::More;
use strict;

sub test {
    my $$self = shift;
    $$self-&gt;test_Something();
    done_testing();
}

sub test_Something {
    my $$self = shift;
    my $$SubTestName = (caller(0))[3];
    ok(1, "$$SubTestName - Proves that ...");
}

__PACKAGE__-&gt;runScript();</template><template context="perl" description="get the path of a method" enabled="true" name="TestName">my $$SubTestName = (caller(0))[3];</template><template context="perl" description="get the path of a method" enabled="true" name="subtestname">my $$SubTestName = (caller(0))[3];</template><template context="perl" description="ok assert" enabled="true" name="ok">ok(1,"$$SubTestName - explain what is tested");</template><template context="perl" description="is assert" enabled="true" name="is">is(${cursor}, 1, "$$SubTestName - Prove that ...");</template><template context="perl" description="throws_ok unit test (dont forget to use use Test::Exception)" enabled="true" name="throws_ok">throws_ok( sub {  },
               qr/ErrorMessage/,
               "$$SubTestName - Proves that..."
     );</template><template context="perl" description="use DE_EPAGES::Test::Mock::Mockify;" enabled="true" name="usemockify">use DE_EPAGES::Test::Mock::Mockify;</template><template context="perl" description="use DE_EPAGES::Test::Mock::MockifyEpagesObject;" enabled="true" name="useepagesobject">use DE_EPAGES::Test::Mock::MockifyEpagesObject;</template><template context="perl" description="sub for ePages object" enabled="true" name="subepagesobject">sub _create${cursor} {
    my $$self = shift;

    my $$hAttributes = {
        'Alias' =&gt; 'MyShop'
    };
    my $$Mockify = DE_EPAGES::Test::Mock::MockifyEpagesObject-&gt;new(
        'DE_EPAGES::Object::API::Object::Object',
        $$hAttributes
    );

    return $$Mockify-&gt;getMockObject();
}</template><template context="perl" description="Method for creating Mockery and mocks" enabled="true" name="Mockery_createMocks">sub _createMocks {
    my $$self = shift;

    my $$Mockery = DE_EPAGES::Test::Mock::Mockery-&gt;new();

    $$Mockery-&gt;register('SUT', [], sub {
        my $$Mockify = DE_EPAGES::Test::Mock::Mockify-&gt;new('Some::Object', []);
        return $$Mockify-&gt;getMockObject();
    });
    $$Mockery-&gt;register('Mock1', ['dependency'], sub {
        my ($$Dependency) = @_;
        my $$Object = DE_EPAGES::Test::Mock::EpagesObject-&gt;new('DE_EPAGES::Object::API::Object::Object', {
            'Alias' =&gt; 'TestObject',
        });
        return $$Object;
    });

    return $$Mockery-&gt;assemble();
}</template><template context="perl" description="imports Mockery" enabled="true" name="useMockery">use DE_EPAGES::Test::Mock::Mockery;</template><template context="perl" description="creates a test case using Mockery" enabled="true" name="Mockery_testUsingMockery">sub test {
    my $$self = shift;
    my $$SubTestName = (caller(0))[3];

    my $$Mockery = $$self-&gt;_createMocks();
    my $$SUT = $$Mockery-&gt;get('SUT');



    ok(0, "$$SubTestName - test if ...");
}</template><template context="perl" description="use DE_EPAGES::Test::Mock::MockifyServlet" enabled="true" name="useservlevet">use DE_EPAGES::Test::Mock::MockifyServlet;</template><template context="perl" description="create helper sub for MockifyServlet" enabled="true" name="subservlet">sub _createServlet {
    my $$self = shift;
    my ($$Object) = @_;

    my $$Mockify = DE_EPAGES::Test::Mock::MockifyServlet-&gt;new( $$Object );
	$$Mockify-&gt;addVar('key', 'value');

    return $$Mockify-&gt;getMockObject();
}</template><template context="perl" description="template for mockfactory" enabled="true" name="Mockfactory">#========================================================================================
# §package      ${packagename}
# §base         DE_EPAGES::Test::Mock::EpagesObjectMockFactory
#----------------------------------------------------------------------------------------
# §description  Extention for Mockfactory
#========================================================================================
package ${packagename};
use base DE_EPAGES::Test::Mock::EpagesObjectMockFactory;

use strict;

sub buildObject {
    my $$self = shift;
    my ($$hAttributes) = @_;

    my $$PackageName = 'Path::of:Object';
    return $$self-&gt;build($$PackageName, $$hAttributes);
}

1;</template><template context="perl" description="Test::Mockify template" enabled="true" name="test Test::Mockify">#========================================================================================
# §package      ${packagename}
# §base         DE_EPAGES::Test::API::UnitTest::Test
#----------------------------------------------------------------------------------------
# §description  unit test for #TODO: SUT name
#========================================================================================
package ${packagename};
use base DE_EPAGES::Test::API::UnitTest::Test;
use Test::Mockify;
use Test::Mockify::Sut;
use Test::Mockify::Matcher qw ( String Number HashRef ArrayRef Object Function Undef Any );
use Test::Mockify::Verify qw ( GetParametersFromMockifyCall WasCalled GetCallCount );

use Test::More;

use strict;

sub test {
    my $$self = shift;

    $$self-&gt;test_Something();
    done_testing();
}
#----------------------------------------------------------------------------------------
sub test_Something {
    my $$self = shift;
    my $$SubTestName = (caller(0))[3];

    my $$SUT = $$self-&gt;_createSUT();

    ok(1,"$$SubTestName - selftest");
}
#----------------------------------------------------------------------------------------
# helpers
#----------------------------------------------------------------------------------------
sub _createSUT {
    my $$self = shift;

    my $$aParameterList = [];
    my $$Mockify = Test::Mockify::Sut-&gt;new(
                   'System::Under:Test',
                   $$aParameterList
              );
    return $$Mockify-&gt;getMockObject();
}

__PACKAGE__-&gt;runScript();</template><template context="perl" description="function template for Test::Mockify" enabled="true" name="sub Test::Mockify">#----------------------------------------------------------------------------------------
sub _create {
    my $$self = shift;

    my $$aParameterList = [];
    my $$Mockify = Test::Mockify-&gt;new(
                   'DE_EPAGES::Test::API::ModuleTwo',
                   $$aParameterList
              );
    $$Mockify
        -&gt;mock('methodName')
        -&gt;when(String())
        -&gt;thenReturn('helloWorld');

    return $$Mockify-&gt;getMockObject();
}</template><template context="perl" description="" enabled="true" name="mock">mock()-&gt;when()-&gt;thenReturn();</template><template context="perl" description="use Mockify with GetParametersFromMockifyCall " enabled="true" name="useMockifyVerify">use Test::Mockify::Verify qw ( GetParametersFromMockifyCall WasCalled GetCallCount );</template><template context="perl" description="like assert" enabled="true" name="like">like('hello you', qr/^hello/, "$$SubTestName - Proves that ...");</template><template context="perl" description="lives_ok assert" enabled="true" name="lives_ok">lives_ok( sub { }, "$$SubTestName - proves that..." );</template></templates>